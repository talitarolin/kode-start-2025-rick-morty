@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: _isSearching
        ? AppBar(
            backgroundColor: Theme.of(context).scaffoldBackgroundColor,
            title: TextField(
              controller: _searchController,
              style: const TextStyle(color: Colors.white),
              decoration: const InputDecoration(
                hintText: "Digite o nome... ou chame o Meeseeks",
                hintStyle: TextStyle(color: Colors.grey),
                border: InputBorder.none,
              ),
              onChanged: (value) {
                if (_debounce?.isActive ?? false) _debounce!.cancel();
                _debounce = Timer(const Duration(milliseconds: 500), () {
                  Provider.of<CharacterProvider>(context, listen: false).searchCharacters(value);
                });
              },
            ),
            leading: IconButton(
              icon: const Icon(Icons.arrow_back),
              onPressed: () {
                setState(() {
                  _isSearching = false;
                  _searchController.clear();
                  Provider.of<CharacterProvider>(context, listen: false).fetchFirstPage();
                });
              },
            ),
          )
        : AppBar(
            title: Image.asset(
              'assets/images/Group_1192x.webp',
              height: 40,
            ),
            centerTitle: true,
            leading: IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                setState(() {
                  _isSearching = true;
                });
              },
            ),
            actions: [
              IconButton(
                icon: const Icon(Icons.filter_list),
                onPressed: () {
                },
              ),
            ],
          ),
    body: Consumer<CharacterProvider>(
      builder: (context, provider, child) {
        if (provider.hasSearched && provider.characters.isEmpty) {
          return Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Image.asset('assets/images/no_results.png', height: 150),
                const SizedBox(height: 16),
                const Text(
                  "Nenhum resultado encontrado. Wubba lubba dub dub!",
                  textAlign: TextAlign.center,
                  style: TextStyle(fontSize: 16, color: Colors.white),
                ),
              ],
            ),
          );
        }
        return GridView.builder(
          controller: _scrollController,
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            crossAxisSpacing: 8,
            mainAxisSpacing: 8,
            childAspectRatio: 0.7,
          ),
          padding: const EdgeInsets.all(16),
          itemCount: provider.characters.length + (provider.hasMoreData ? 1 : 0),
          itemBuilder: (context, index) {
            if (index < provider.characters.length) {
              final character = provider.characters[index];
              return CharacterCard(
                character: character,
                onTap: () {
                  Navigator.pushNamed(
                    context,
                    AppRoutes.characterDetail,
                    arguments: character,
                  );
                },
              );
            } else {
              return const Center(child: CircularProgressIndicator());
            }
          },
        );
      },
    ),
  );
}